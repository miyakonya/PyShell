# coding:UTF-8
# Python 3.10.6

from abc import ABC, abstractmethod
from tabulate import tabulate
from font import print_error, print_success

class BaseExploit(ABC):
    @abstractmethod
    def __init__(self, host=None, port=None):
        self.host = host
        self.port = port
        self.args = {
            "Host": {
                "Value": self.host,
                "Description": "Target IP"
            },
            "Port": {
                "Value": self.port,
                "Description": "Target port"
            }
        }
        """
        self.info是作者信息字典，需要包含下列键(不要将括号里的内容也写进去):
        Author(作者)、Date(日期)、Platform(平台)、Software and version(软件及其版本)、Description(描述)
        """
        self.info = {}
    @abstractmethod
    def run(self):
        """
        Execute exploit code

        Note: When establishing a socket connection
        it is recommended to write the creation of the socket object in this method
        """
        pass
    @abstractmethod
    def set(self, arg, value):
        """
        设置模块参数的方法
        默认包含host和port参数，如果你的模块只需要host和port参数可以直接使用super()调用
        如果有需要可以扩展
        """
        if arg.lower() == "host":
            if len(value.split(".")) != 4:
                print_error("Not a valid IP address")
                return
            self.args["Host"]["Value"] = value
            self.host = value
            print_success("Host => " + value)
        elif arg.lower()== "port":
            try:
                if not (0 < int(value) <= 65535):
                    print_error("Not a valid port number")
                    return
                self.args["Port"]["Value"] = value
                self.port = value
                print_success("Port => " + value)
            except ValueError:
                print_error("Not a valid port number")
    @abstractmethod
    def options(self):
        """
        列出模块参数的方法
        直接super()调用即可
        """
        table_data = []
        for name, data in self.args.items():
            table_data.append([name, data['Value'], data['Description']])
        headers = ["Name", "Value", "Description"]
        print(tabulate(table_data, headers=headers, tablefmt="grid"))
    @abstractmethod
    def show_info(self):
        """
        列出作者信息的方法
        直接super()调用即可
        """
        table_data = [[k, v] for k, v in self.info.items()]
        print(tabulate(table_data, tablefmt="grid"))
